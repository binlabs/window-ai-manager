{"version":3,"file":"window-ai-manager.cjs.js","sources":["../node_modules/marked/lib/marked.esm.js","../src/polyfill.ts","../src/index.ts"],"sourcesContent":["/**\n * marked v12.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            // precede setext continuation with 4 spaces so it isn't a setext\n            let text = cap[0].replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1');\n            text = rtrim(text.replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","class MockAITextSession implements AITextSession {\n    async prompt(input: string): Promise<string> {\n        return `Mock response to: ${input}`\n    }\n\n    async *promptStreaming(input: string): AsyncIterableIterator<string> {\n        yield `Mock streaming response to: ${input}`\n    }\n\n    destroy(): void {\n        console.log('Session destroyed')\n    }\n\n    clone(): AITextSession {\n        throw new Error('Clone not implemented')\n    }\n}\n\nclass MockAI implements AI {\n    async canCreateTextSession(): Promise<AIModelAvailability> {\n        return 'readily'\n    }\n\n    async createTextSession(options?: AITextSessionOptions): Promise<AITextSession> {\n        return new MockAITextSession()\n    }\n\n    async defaultTextSessionOptions(): Promise<AITextSessionOptions> {\n        return {\n            topK: 50,\n            temperature: 0.7,\n        }\n    }\n}\n\n// Only polyfill if the AI API is not already available\nif (!window.ai) {\n    ;(window as any).ai = new MockAI()\n}\n","import { marked } from 'marked'\nimport './polyfill'\n\n/**\n * Manages AI text sessions in the browser using the window.ai API.\n */\nclass WindowAIManager {\n    private sessions: Map<string, AITextSession>\n\n    constructor() {\n        this.sessions = new Map<string, AITextSession>()\n    }\n\n    /**\n     * Checks if a text session can be created.\n     * @returns {Promise<string>} One of \"readily\", \"after-download\", or \"no\".\n     */\n    async canCreateSession(): Promise<'readily' | 'after-download' | 'no'> {\n        const canCreate = await window.ai.canCreateTextSession()\n        return canCreate\n    }\n\n    /**\n     * Creates a new text session with the given sessionId.\n     * @param {string} sessionId - The unique identifier for the session.\n     * @throws {Error} If the model is not available on this device.\n     */\n    async createSession(sessionId: string): Promise<void> {\n        const canCreate = await this.canCreateSession()\n        if (canCreate === 'no') {\n            throw new Error('Cannot create session: model not available on this device.')\n        }\n        const session = await window.ai.createTextSession()\n        this.sessions.set(sessionId, session)\n    }\n\n    /**\n     * Sends a prompt to the specified session and returns the response.\n     * @param {string} sessionId - The unique identifier for the session.\n     * @param {string} text - The prompt text to send to the model.\n     * @returns {Promise<string>} The response from the model.\n     * @throws {Error} If the session with the given ID is not found.\n     */\n    async prompt(sessionId: string, text: string): Promise<string> {\n        const session = this.sessions.get(sessionId)\n        if (!session) {\n            throw new Error(`Session with ID ${sessionId} not found. Call createSession() first.`)\n        }\n        return await session.prompt(text)\n    }\n\n    /**\n     * Sends a streaming prompt to the specified session and processes the chunks received.\n     * @param {string} sessionId - The unique identifier for the session.\n     * @param {string} text - The prompt text to send to the model.\n     * @param {function} onChunkReceived - Callback function to handle each chunk received.\n     * @returns {Promise<string>} The final concatenated result from the model.\n     * @throws {Error} If the session with the given ID is not found.\n     */\n    async promptStreaming(sessionId: string, text: string, onChunkReceived: (chunk: string) => void): Promise<string> {\n        const session = this.sessions.get(sessionId)\n        if (!session) {\n            throw new Error(`Session with ID ${sessionId} not found. Call createSession() first.`)\n        }\n        const stream = session.promptStreaming(text)\n        let result = ''\n        let previousLength = 0\n        for await (const chunk of stream) {\n            const newContent = chunk.slice(previousLength)\n            onChunkReceived(newContent)\n            previousLength = chunk.length\n            result += newContent\n        }\n        return result\n    }\n\n    /**\n     * Destroys the specified session and removes it from the map.\n     * @param {string} sessionId - The unique identifier for the session.\n     * @throws {Error} If the session with the given ID is not found.\n     */\n    async destroySession(sessionId: string): Promise<void> {\n        const session = this.sessions.get(sessionId)\n        if (session) {\n            session.destroy()\n            this.sessions.delete(sessionId)\n        } else {\n            throw new Error(`Session with ID ${sessionId} not found.`)\n        }\n    }\n\n    /**\n     * Destroys all active sessions and clears the map.\n     */\n    async destroyAllSessions(): Promise<void> {\n        for (const [_sessionId, session] of this.sessions) {\n            session.destroy()\n        }\n        this.sessions.clear()\n    }\n\n    /**\n     * Renders markdown text to HTML.\n     * @param {string} markdown - The markdown text to render.\n     * @returns {string} The rendered HTML.\n     */\n    renderMarkdown(markdown: string): string | Promise<string> {\n        return marked(markdown)\n    }\n}\n\nexport default WindowAIManager\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parser","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","Marked","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","onError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults","MockAITextSession","prompt","input","promptStreaming","destroy","log","clone","MockAI","canCreateTextSession","createTextSession","defaultTextSessionOptions","topK","temperature","window","ai","WindowAIManager","sessions","Map","canCreateSession","canCreate","createSession","sessionId","session","set","get","onChunkReceived","stream","result","previousLength","chunk","newContent","destroySession","delete","destroyAllSessions","_sessionId","clear","renderMarkdown"],"mappings":"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","x_google_ignoreList":[0]}